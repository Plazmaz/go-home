48271 x = 182605794 mod 2147483647
x = 48271^-1 * 182605794 mod 2147483647
48271^-1 is an integer b such that 48271 * b = 1 mod 2147483647

48271^-1 mod 2147483647 = 
2147483647 = 48271(44488) + 3399
48271 = 3399(14) + 685
3399 = 685(4) + 659
685 = 659(1) + 26
659 = 26(25) + 9
26 = 9(2) + 8
9 = 8(1) + 1
-------------
8 = 8(1) +0


1 = 9+8(-1)
= 9+(26+9(-2))(-1)
= 9(3) + 26(-1)
= (659+26(-25))(3) + 26(-1)

= 659(3)+26(-76)
= 659(3)+26(-76)
= 659(3)+9(-152) + 8(-76)

= 2147483647 * 5567 + 48271 * -247665088
= 0 * 5567 + (48271 * -247665088)
= 48271 * -247665088
182605794 * -247665088 = -45225080040319872
-45225080040319872 % 2147483647 = -48271

-247665088 % 2147483647= 1899818559
182605794 * 1899818559 = 48271






---------------

x1 = 100110000001110111001011100100
x2 = 110110100010001101010101100001
x3 = 1110011001000101011110110000100

u = x1 << 40 = 11101110010111001000000000000000000000000000000000000000000
keep last 19 bits of x1
x1 = 1110111001011100100
--
x2 << 20 =         11011010|001000110101010110000100000000000000000000
u ^= x2 = 11101110001100011|001000110101010110000100000000000000000000
keep last 22 bits of x2, 9 bits(bits 12-20 incl, 111011100) of x1
--
                                      |11100110010|00101011110110000100
          1110111000110001100100011010|10101100001|00000000000000000000
u ^= x3 = 1110111000110001100100011010|01001010011|00101011110110000100
                          |00100011010|10101100001|00000000000000000000
9 bits(bits 12-21, 111011100) of x1, 11 bits (bits 9-20, 00100011010) of x2, keep last 20 bits of x3


x1                                        x2                                   x3
10011000000|111011100|1011100100          11011010|00100011010|10101100001     11100110010|00101011110110000100
              /                                        /                                      /
        v-----              v--------------------------    v---------------------------------
111011100|~01100011~|00100011010|~01001010011~|00101011110110000100

11101110001100011001000110100100101001100101011110110000100 
--
Out of 32 bits
x1 -> know bits 12-21
x2 -> know bits 9-20
x3 -> know last 20 bits
Total bits: 96
Known bits: 40
x1 missing bits: 23 (2^23 = 8388608 permutations)
x2 missing bits: 21 (2^21 = 2097152 permutations)
x3 missing bits: 12 (2^12 = 4096 permutations)
Does knowing x3 reduce the search space for x2 and x1 due to the xor?

-------------
Generalize o as
o(i) = (x1 << 40) xor (x2 << 20) xor x3
x3 = o(i) xor (x1 << 40) xor (x2 << 20)
Our output is
         11101110001100011001000110100100101001100101011110110000100 
and x3 is
         1110011001000101011110110000100
o ^ x3 = 11101110001100011001000110101010110000100000000000000000000
So we now have 22 bits of x2. The answer is yes! Knowing x3 reduces the space.
x3 requires 4096 permutations
x2 (after x3 xor) requires 2^10 or 1024 permutations
x1 (after x2 xor) requires 2^13 or 8192 permutations

we only need 2 values. However those two values need to be the correct combination. This increases our search space.
for each 2^12 x3 candidate, we need to check 2^10 x2 candidates, so our total is 2^22 permutations